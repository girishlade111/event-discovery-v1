import { useState, useEffect } from 'react'
import { Card, CardContent, CardFooter, CardHeader, CardTitle } from "/components/ui/card"
import { Button } from "/components/ui/button"
import { Calendar, MapPin, Clock } from "lucide-react"

// Mock event data that would normally come from Ticketmaster API
const mockEvents = [
  {
    id: '1',
    name: 'Jazz Night at the Blue Note',
    date: '2023-11-15T20:00:00',
    venue: 'The Blue Note',
    location: { lat: 40.7392, lng: -73.9925 },
    description: 'An evening of smooth jazz with local artists',
    imageUrl: ''
  },
  {
    id: '2',
    name: 'Tech Conference 2023',
    date: '2023-11-18T09:00:00',
    venue: 'Convention Center',
    location: { lat: 40.7505, lng: -73.9764 },
    description: 'Annual technology conference with industry leaders',
    imageUrl: ''
  },
  {
    id: '3',
    name: 'Farmers Market',
    date: '2023-11-12T08:00:00',
    venue: 'Main Square',
    location: { lat: 40.7282, lng: -73.9876 },
    description: 'Local produce and handmade goods',
    imageUrl: ''
  },
  {
    id: '4',
    name: 'Art Exhibition Opening',
    date: '2023-11-20T18:00:00',
    venue: 'Modern Art Museum',
    location: { lat: 40.7614, lng: -73.9776 },
    description: 'New works by contemporary artists',
    imageUrl: ''
  }
]

// Helper function to calculate distance between two coordinates (simplified)
function calculateDistance(lat1: number, lon1: number, lat2: number, lon2: number) {
  const R = 6371 // Earth radius in km
  const dLat = (lat2 - lat1) * Math.PI / 180
  const dLon = (lon2 - lon1) * Math.PI / 180
  const a = 
    Math.sin(dLat/2) * Math.sin(dLat/2) +
    Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) * 
    Math.sin(dLon/2) * Math.sin(dLon/2)
  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a))
  return R * c
}

export default function EventDiscovery() {
  const [events, setEvents] = useState(mockEvents)
  const [userLocation, setUserLocation] = useState<{lat: number, lng: number} | null>(null)
  const [isLoading, setIsLoading] = useState(true)
  const [offlineMode, setOfflineMode] = useState(false)

  // Simulate fetching events with mock data
  useEffect(() => {
    const timer = setTimeout(() => {
      // Check if we have cached events in localStorage
      const cachedEvents = localStorage.getItem('cachedEvents')
      if (cachedEvents) {
        setEvents(JSON.parse(cachedEvents))
        setOfflineMode(true)
      } else {
        setEvents(mockEvents)
        // Cache the events
        localStorage.setItem('cachedEvents', JSON.stringify(mockEvents))
      }
      setIsLoading(false)
    }, 800) // Simulate network delay

    return () => clearTimeout(timer)
  }, [])

  // Get user location
  useEffect(() => {
    if (navigator.geolocation) {
      navigator.geolocation.getCurrentPosition(
        (position) => {
          setUserLocation({
            lat: position.coords.latitude,
            lng: position.coords.longitude
          })
        },
        (error) => {
          console.error("Error getting location:", error)
          // Default to NYC coordinates if location access is denied
          setUserLocation({ lat: 40.7128, lng: -74.0060 })
        }
      )
    } else {
      // Default to NYC coordinates if geolocation is not supported
      setUserLocation({ lat: 40.7128, lng: -74.0060 })
    }
  }, [])

  // Sort events by distance when we have user location
  useEffect(() => {
    if (userLocation && events.length > 0) {
      const sortedEvents = [...events].sort((a, b) => {
        const distA = calculateDistance(
          userLocation.lat, 
          userLocation.lng, 
          a.location.lat, 
          a.location.lng
        )
        const distB = calculateDistance(
          userLocation.lat, 
          userLocation.lng, 
          b.location.lat, 
          b.location.lng
        )
        return distA - distB
      })
      setEvents(sortedEvents)
    }
  }, [userLocation])

  const saveToCalendar = (event: typeof mockEvents[0]) => {
    const eventDate = new Date(event.date)
    const endDate = new Date(eventDate.getTime() + 2 * 60 * 60 * 1000) // Add 2 hours
    
    // Create calendar event data
    const calendarEvent = {
      title: event.name,
      description: `${event.description}\n${event.venue}`,
      start: eventDate.toISOString(),
      end: endDate.toISOString(),
      location: event.venue
    }
    
    // In a real app, this would use the Web Calendar API
    // For this demo, we'll just show an alert
    alert(`Event "${event.name}" would be saved to your calendar with these details:\n
      Title: ${calendarEvent.title}\n
      Date: ${eventDate.toLocaleString()}\n
      Location: ${calendarEvent.location}`)
  }

  const formatDate = (dateString: string) => {
    const date = new Date(dateString)
    return date.toLocaleDateString('en-US', {
      weekday: 'short',
      month: 'short',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    })
  }

  return (
    <div className="min-h-screen bg-gray-50">
      <div className="container mx-auto px-4 py-8">
        <h1 className="text-3xl font-bold mb-6">Local Events</h1>
        
        {offlineMode && (
          <div className="bg-yellow-100 border-l-4 border-yellow-500 text-yellow-700 p-4 mb-4">
            <p>You're viewing cached events in offline mode</p>
          </div>
        )}
        
        {isLoading ? (
          <div className="flex justify-center items-center h-64">
            <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-primary"></div>
          </div>
        ) : (
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            {events.map((event) => (
              <Card key={event.id} className="hover:shadow-lg transition-shadow">
                <CardHeader>
                  <CardTitle className="text-xl">{event.name}</CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="flex items-center mb-2 text-muted-foreground">
                    <MapPin className="h-4 w-4 mr-2" />
                    <span>{event.venue}</span>
                  </div>
                  <div className="flex items-center mb-4 text-muted-foreground">
                    <Clock className="h-4 w-4 mr-2" />
                    <span>{formatDate(event.date)}</span>
                  </div>
                  <p className="text-sm">{event.description}</p>
                  {/* Placeholder for event image */}
                  <div className="bg-gray-200 border-2 border-dashed rounded-xl w-full h-32 mt-4" />
                </CardContent>
                <CardFooter className="flex justify-end">
                  <Button 
                    variant="outline" 
                    onClick={() => saveToCalendar(event)}
                    className="flex items-center"
                  >
                    <Calendar className="h-4 w-4 mr-2" />
                    Save to Calendar
                  </Button>
                </CardFooter>
              </Card>
            ))}
          </div>
        )}
      </div>
    </div>
  )
}
